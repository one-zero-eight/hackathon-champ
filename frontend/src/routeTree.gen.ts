/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TermsImport } from './routes/terms'
import { Route as SearchImport } from './routes/search'
import { Route as PrivacyImport } from './routes/privacy'
import { Route as FeedbackImport } from './routes/feedback'
import { Route as DisciplinesImport } from './routes/disciplines'
import { Route as CalendarImport } from './routes/calendar'
import { Route as AboutImport } from './routes/about'
import { Route as ManageRouteImport } from './routes/manage/route'
import { Route as IndexImport } from './routes/index'
import { Route as ManageIndexImport } from './routes/manage/index'
import { Route as FederationsIndexImport } from './routes/federations/index'
import { Route as FederationsFederationIdImport } from './routes/federations/$federationId'
import { Route as EventsEventIdImport } from './routes/events/$eventId'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as ManageFederationsIndexImport } from './routes/manage/federations/index'
import { Route as ManageAnalyticsIndexImport } from './routes/manage/analytics/index'
import { Route as ManageRegionHomeImport } from './routes/manage/region/home'
import { Route as ManageRegionFeedbackImport } from './routes/manage/region/feedback'
import { Route as ManageFederationsIdImport } from './routes/manage/federations/$id'
import { Route as ManageEventsSuggestImport } from './routes/manage/events/suggest'
import { Route as ManageEventsRegionImport } from './routes/manage/events/region'
import { Route as ManageEventsAllImport } from './routes/manage/events/all'
import { Route as ManageEventsIdImport } from './routes/manage/events/$id'
import { Route as ManageAnalyticsIdImport } from './routes/manage/analytics/$id'
import { Route as ManageAdminHomeImport } from './routes/manage/admin/home'

// Create/Update Routes

const TermsRoute = TermsImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRoute,
} as any)

const SearchRoute = SearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyRoute = PrivacyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any)

const FeedbackRoute = FeedbackImport.update({
  id: '/feedback',
  path: '/feedback',
  getParentRoute: () => rootRoute,
} as any)

const DisciplinesRoute = DisciplinesImport.update({
  id: '/disciplines',
  path: '/disciplines',
  getParentRoute: () => rootRoute,
} as any)

const CalendarRoute = CalendarImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const ManageRouteRoute = ManageRouteImport.update({
  id: '/manage',
  path: '/manage',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ManageIndexRoute = ManageIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ManageRouteRoute,
} as any)

const FederationsIndexRoute = FederationsIndexImport.update({
  id: '/federations/',
  path: '/federations/',
  getParentRoute: () => rootRoute,
} as any)

const FederationsFederationIdRoute = FederationsFederationIdImport.update({
  id: '/federations/$federationId',
  path: '/federations/$federationId',
  getParentRoute: () => rootRoute,
} as any)

const EventsEventIdRoute = EventsEventIdImport.update({
  id: '/events/$eventId',
  path: '/events/$eventId',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const ManageFederationsIndexRoute = ManageFederationsIndexImport.update({
  id: '/federations/',
  path: '/federations/',
  getParentRoute: () => ManageRouteRoute,
} as any)

const ManageAnalyticsIndexRoute = ManageAnalyticsIndexImport.update({
  id: '/analytics/',
  path: '/analytics/',
  getParentRoute: () => ManageRouteRoute,
} as any)

const ManageRegionHomeRoute = ManageRegionHomeImport.update({
  id: '/region/home',
  path: '/region/home',
  getParentRoute: () => ManageRouteRoute,
} as any)

const ManageRegionFeedbackRoute = ManageRegionFeedbackImport.update({
  id: '/region/feedback',
  path: '/region/feedback',
  getParentRoute: () => ManageRouteRoute,
} as any)

const ManageFederationsIdRoute = ManageFederationsIdImport.update({
  id: '/federations/$id',
  path: '/federations/$id',
  getParentRoute: () => ManageRouteRoute,
} as any)

const ManageEventsSuggestRoute = ManageEventsSuggestImport.update({
  id: '/events/suggest',
  path: '/events/suggest',
  getParentRoute: () => ManageRouteRoute,
} as any)

const ManageEventsRegionRoute = ManageEventsRegionImport.update({
  id: '/events/region',
  path: '/events/region',
  getParentRoute: () => ManageRouteRoute,
} as any)

const ManageEventsAllRoute = ManageEventsAllImport.update({
  id: '/events/all',
  path: '/events/all',
  getParentRoute: () => ManageRouteRoute,
} as any)

const ManageEventsIdRoute = ManageEventsIdImport.update({
  id: '/events/$id',
  path: '/events/$id',
  getParentRoute: () => ManageRouteRoute,
} as any)

const ManageAnalyticsIdRoute = ManageAnalyticsIdImport.update({
  id: '/analytics/$id',
  path: '/analytics/$id',
  getParentRoute: () => ManageRouteRoute,
} as any)

const ManageAdminHomeRoute = ManageAdminHomeImport.update({
  id: '/admin/home',
  path: '/admin/home',
  getParentRoute: () => ManageRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/manage': {
      id: '/manage'
      path: '/manage'
      fullPath: '/manage'
      preLoaderRoute: typeof ManageRouteImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/calendar': {
      id: '/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof CalendarImport
      parentRoute: typeof rootRoute
    }
    '/disciplines': {
      id: '/disciplines'
      path: '/disciplines'
      fullPath: '/disciplines'
      preLoaderRoute: typeof DisciplinesImport
      parentRoute: typeof rootRoute
    }
    '/feedback': {
      id: '/feedback'
      path: '/feedback'
      fullPath: '/feedback'
      preLoaderRoute: typeof FeedbackImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/events/$eventId': {
      id: '/events/$eventId'
      path: '/events/$eventId'
      fullPath: '/events/$eventId'
      preLoaderRoute: typeof EventsEventIdImport
      parentRoute: typeof rootRoute
    }
    '/federations/$federationId': {
      id: '/federations/$federationId'
      path: '/federations/$federationId'
      fullPath: '/federations/$federationId'
      preLoaderRoute: typeof FederationsFederationIdImport
      parentRoute: typeof rootRoute
    }
    '/federations/': {
      id: '/federations/'
      path: '/federations'
      fullPath: '/federations'
      preLoaderRoute: typeof FederationsIndexImport
      parentRoute: typeof rootRoute
    }
    '/manage/': {
      id: '/manage/'
      path: '/'
      fullPath: '/manage/'
      preLoaderRoute: typeof ManageIndexImport
      parentRoute: typeof ManageRouteImport
    }
    '/manage/admin/home': {
      id: '/manage/admin/home'
      path: '/admin/home'
      fullPath: '/manage/admin/home'
      preLoaderRoute: typeof ManageAdminHomeImport
      parentRoute: typeof ManageRouteImport
    }
    '/manage/analytics/$id': {
      id: '/manage/analytics/$id'
      path: '/analytics/$id'
      fullPath: '/manage/analytics/$id'
      preLoaderRoute: typeof ManageAnalyticsIdImport
      parentRoute: typeof ManageRouteImport
    }
    '/manage/events/$id': {
      id: '/manage/events/$id'
      path: '/events/$id'
      fullPath: '/manage/events/$id'
      preLoaderRoute: typeof ManageEventsIdImport
      parentRoute: typeof ManageRouteImport
    }
    '/manage/events/all': {
      id: '/manage/events/all'
      path: '/events/all'
      fullPath: '/manage/events/all'
      preLoaderRoute: typeof ManageEventsAllImport
      parentRoute: typeof ManageRouteImport
    }
    '/manage/events/region': {
      id: '/manage/events/region'
      path: '/events/region'
      fullPath: '/manage/events/region'
      preLoaderRoute: typeof ManageEventsRegionImport
      parentRoute: typeof ManageRouteImport
    }
    '/manage/events/suggest': {
      id: '/manage/events/suggest'
      path: '/events/suggest'
      fullPath: '/manage/events/suggest'
      preLoaderRoute: typeof ManageEventsSuggestImport
      parentRoute: typeof ManageRouteImport
    }
    '/manage/federations/$id': {
      id: '/manage/federations/$id'
      path: '/federations/$id'
      fullPath: '/manage/federations/$id'
      preLoaderRoute: typeof ManageFederationsIdImport
      parentRoute: typeof ManageRouteImport
    }
    '/manage/region/feedback': {
      id: '/manage/region/feedback'
      path: '/region/feedback'
      fullPath: '/manage/region/feedback'
      preLoaderRoute: typeof ManageRegionFeedbackImport
      parentRoute: typeof ManageRouteImport
    }
    '/manage/region/home': {
      id: '/manage/region/home'
      path: '/region/home'
      fullPath: '/manage/region/home'
      preLoaderRoute: typeof ManageRegionHomeImport
      parentRoute: typeof ManageRouteImport
    }
    '/manage/analytics/': {
      id: '/manage/analytics/'
      path: '/analytics'
      fullPath: '/manage/analytics'
      preLoaderRoute: typeof ManageAnalyticsIndexImport
      parentRoute: typeof ManageRouteImport
    }
    '/manage/federations/': {
      id: '/manage/federations/'
      path: '/federations'
      fullPath: '/manage/federations'
      preLoaderRoute: typeof ManageFederationsIndexImport
      parentRoute: typeof ManageRouteImport
    }
  }
}

// Create and export the route tree

interface ManageRouteRouteChildren {
  ManageIndexRoute: typeof ManageIndexRoute
  ManageAdminHomeRoute: typeof ManageAdminHomeRoute
  ManageAnalyticsIdRoute: typeof ManageAnalyticsIdRoute
  ManageEventsIdRoute: typeof ManageEventsIdRoute
  ManageEventsAllRoute: typeof ManageEventsAllRoute
  ManageEventsRegionRoute: typeof ManageEventsRegionRoute
  ManageEventsSuggestRoute: typeof ManageEventsSuggestRoute
  ManageFederationsIdRoute: typeof ManageFederationsIdRoute
  ManageRegionFeedbackRoute: typeof ManageRegionFeedbackRoute
  ManageRegionHomeRoute: typeof ManageRegionHomeRoute
  ManageAnalyticsIndexRoute: typeof ManageAnalyticsIndexRoute
  ManageFederationsIndexRoute: typeof ManageFederationsIndexRoute
}

const ManageRouteRouteChildren: ManageRouteRouteChildren = {
  ManageIndexRoute: ManageIndexRoute,
  ManageAdminHomeRoute: ManageAdminHomeRoute,
  ManageAnalyticsIdRoute: ManageAnalyticsIdRoute,
  ManageEventsIdRoute: ManageEventsIdRoute,
  ManageEventsAllRoute: ManageEventsAllRoute,
  ManageEventsRegionRoute: ManageEventsRegionRoute,
  ManageEventsSuggestRoute: ManageEventsSuggestRoute,
  ManageFederationsIdRoute: ManageFederationsIdRoute,
  ManageRegionFeedbackRoute: ManageRegionFeedbackRoute,
  ManageRegionHomeRoute: ManageRegionHomeRoute,
  ManageAnalyticsIndexRoute: ManageAnalyticsIndexRoute,
  ManageFederationsIndexRoute: ManageFederationsIndexRoute,
}

const ManageRouteRouteWithChildren = ManageRouteRoute._addFileChildren(
  ManageRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/manage': typeof ManageRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/calendar': typeof CalendarRoute
  '/disciplines': typeof DisciplinesRoute
  '/feedback': typeof FeedbackRoute
  '/privacy': typeof PrivacyRoute
  '/search': typeof SearchRoute
  '/terms': typeof TermsRoute
  '/auth/login': typeof AuthLoginRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/federations/$federationId': typeof FederationsFederationIdRoute
  '/federations': typeof FederationsIndexRoute
  '/manage/': typeof ManageIndexRoute
  '/manage/admin/home': typeof ManageAdminHomeRoute
  '/manage/analytics/$id': typeof ManageAnalyticsIdRoute
  '/manage/events/$id': typeof ManageEventsIdRoute
  '/manage/events/all': typeof ManageEventsAllRoute
  '/manage/events/region': typeof ManageEventsRegionRoute
  '/manage/events/suggest': typeof ManageEventsSuggestRoute
  '/manage/federations/$id': typeof ManageFederationsIdRoute
  '/manage/region/feedback': typeof ManageRegionFeedbackRoute
  '/manage/region/home': typeof ManageRegionHomeRoute
  '/manage/analytics': typeof ManageAnalyticsIndexRoute
  '/manage/federations': typeof ManageFederationsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/calendar': typeof CalendarRoute
  '/disciplines': typeof DisciplinesRoute
  '/feedback': typeof FeedbackRoute
  '/privacy': typeof PrivacyRoute
  '/search': typeof SearchRoute
  '/terms': typeof TermsRoute
  '/auth/login': typeof AuthLoginRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/federations/$federationId': typeof FederationsFederationIdRoute
  '/federations': typeof FederationsIndexRoute
  '/manage': typeof ManageIndexRoute
  '/manage/admin/home': typeof ManageAdminHomeRoute
  '/manage/analytics/$id': typeof ManageAnalyticsIdRoute
  '/manage/events/$id': typeof ManageEventsIdRoute
  '/manage/events/all': typeof ManageEventsAllRoute
  '/manage/events/region': typeof ManageEventsRegionRoute
  '/manage/events/suggest': typeof ManageEventsSuggestRoute
  '/manage/federations/$id': typeof ManageFederationsIdRoute
  '/manage/region/feedback': typeof ManageRegionFeedbackRoute
  '/manage/region/home': typeof ManageRegionHomeRoute
  '/manage/analytics': typeof ManageAnalyticsIndexRoute
  '/manage/federations': typeof ManageFederationsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/manage': typeof ManageRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/calendar': typeof CalendarRoute
  '/disciplines': typeof DisciplinesRoute
  '/feedback': typeof FeedbackRoute
  '/privacy': typeof PrivacyRoute
  '/search': typeof SearchRoute
  '/terms': typeof TermsRoute
  '/auth/login': typeof AuthLoginRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/federations/$federationId': typeof FederationsFederationIdRoute
  '/federations/': typeof FederationsIndexRoute
  '/manage/': typeof ManageIndexRoute
  '/manage/admin/home': typeof ManageAdminHomeRoute
  '/manage/analytics/$id': typeof ManageAnalyticsIdRoute
  '/manage/events/$id': typeof ManageEventsIdRoute
  '/manage/events/all': typeof ManageEventsAllRoute
  '/manage/events/region': typeof ManageEventsRegionRoute
  '/manage/events/suggest': typeof ManageEventsSuggestRoute
  '/manage/federations/$id': typeof ManageFederationsIdRoute
  '/manage/region/feedback': typeof ManageRegionFeedbackRoute
  '/manage/region/home': typeof ManageRegionHomeRoute
  '/manage/analytics/': typeof ManageAnalyticsIndexRoute
  '/manage/federations/': typeof ManageFederationsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/manage'
    | '/about'
    | '/calendar'
    | '/disciplines'
    | '/feedback'
    | '/privacy'
    | '/search'
    | '/terms'
    | '/auth/login'
    | '/events/$eventId'
    | '/federations/$federationId'
    | '/federations'
    | '/manage/'
    | '/manage/admin/home'
    | '/manage/analytics/$id'
    | '/manage/events/$id'
    | '/manage/events/all'
    | '/manage/events/region'
    | '/manage/events/suggest'
    | '/manage/federations/$id'
    | '/manage/region/feedback'
    | '/manage/region/home'
    | '/manage/analytics'
    | '/manage/federations'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/calendar'
    | '/disciplines'
    | '/feedback'
    | '/privacy'
    | '/search'
    | '/terms'
    | '/auth/login'
    | '/events/$eventId'
    | '/federations/$federationId'
    | '/federations'
    | '/manage'
    | '/manage/admin/home'
    | '/manage/analytics/$id'
    | '/manage/events/$id'
    | '/manage/events/all'
    | '/manage/events/region'
    | '/manage/events/suggest'
    | '/manage/federations/$id'
    | '/manage/region/feedback'
    | '/manage/region/home'
    | '/manage/analytics'
    | '/manage/federations'
  id:
    | '__root__'
    | '/'
    | '/manage'
    | '/about'
    | '/calendar'
    | '/disciplines'
    | '/feedback'
    | '/privacy'
    | '/search'
    | '/terms'
    | '/auth/login'
    | '/events/$eventId'
    | '/federations/$federationId'
    | '/federations/'
    | '/manage/'
    | '/manage/admin/home'
    | '/manage/analytics/$id'
    | '/manage/events/$id'
    | '/manage/events/all'
    | '/manage/events/region'
    | '/manage/events/suggest'
    | '/manage/federations/$id'
    | '/manage/region/feedback'
    | '/manage/region/home'
    | '/manage/analytics/'
    | '/manage/federations/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ManageRouteRoute: typeof ManageRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  CalendarRoute: typeof CalendarRoute
  DisciplinesRoute: typeof DisciplinesRoute
  FeedbackRoute: typeof FeedbackRoute
  PrivacyRoute: typeof PrivacyRoute
  SearchRoute: typeof SearchRoute
  TermsRoute: typeof TermsRoute
  AuthLoginRoute: typeof AuthLoginRoute
  EventsEventIdRoute: typeof EventsEventIdRoute
  FederationsFederationIdRoute: typeof FederationsFederationIdRoute
  FederationsIndexRoute: typeof FederationsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ManageRouteRoute: ManageRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  CalendarRoute: CalendarRoute,
  DisciplinesRoute: DisciplinesRoute,
  FeedbackRoute: FeedbackRoute,
  PrivacyRoute: PrivacyRoute,
  SearchRoute: SearchRoute,
  TermsRoute: TermsRoute,
  AuthLoginRoute: AuthLoginRoute,
  EventsEventIdRoute: EventsEventIdRoute,
  FederationsFederationIdRoute: FederationsFederationIdRoute,
  FederationsIndexRoute: FederationsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/manage",
        "/about",
        "/calendar",
        "/disciplines",
        "/feedback",
        "/privacy",
        "/search",
        "/terms",
        "/auth/login",
        "/events/$eventId",
        "/federations/$federationId",
        "/federations/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/manage": {
      "filePath": "manage/route.tsx",
      "children": [
        "/manage/",
        "/manage/admin/home",
        "/manage/analytics/$id",
        "/manage/events/$id",
        "/manage/events/all",
        "/manage/events/region",
        "/manage/events/suggest",
        "/manage/federations/$id",
        "/manage/region/feedback",
        "/manage/region/home",
        "/manage/analytics/",
        "/manage/federations/"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/calendar": {
      "filePath": "calendar.tsx"
    },
    "/disciplines": {
      "filePath": "disciplines.tsx"
    },
    "/feedback": {
      "filePath": "feedback.tsx"
    },
    "/privacy": {
      "filePath": "privacy.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/terms": {
      "filePath": "terms.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/events/$eventId": {
      "filePath": "events/$eventId.tsx"
    },
    "/federations/$federationId": {
      "filePath": "federations/$federationId.tsx"
    },
    "/federations/": {
      "filePath": "federations/index.tsx"
    },
    "/manage/": {
      "filePath": "manage/index.tsx",
      "parent": "/manage"
    },
    "/manage/admin/home": {
      "filePath": "manage/admin/home.tsx",
      "parent": "/manage"
    },
    "/manage/analytics/$id": {
      "filePath": "manage/analytics/$id.tsx",
      "parent": "/manage"
    },
    "/manage/events/$id": {
      "filePath": "manage/events/$id.tsx",
      "parent": "/manage"
    },
    "/manage/events/all": {
      "filePath": "manage/events/all.tsx",
      "parent": "/manage"
    },
    "/manage/events/region": {
      "filePath": "manage/events/region.tsx",
      "parent": "/manage"
    },
    "/manage/events/suggest": {
      "filePath": "manage/events/suggest.tsx",
      "parent": "/manage"
    },
    "/manage/federations/$id": {
      "filePath": "manage/federations/$id.tsx",
      "parent": "/manage"
    },
    "/manage/region/feedback": {
      "filePath": "manage/region/feedback.tsx",
      "parent": "/manage"
    },
    "/manage/region/home": {
      "filePath": "manage/region/home.tsx",
      "parent": "/manage"
    },
    "/manage/analytics/": {
      "filePath": "manage/analytics/index.tsx",
      "parent": "/manage"
    },
    "/manage/federations/": {
      "filePath": "manage/federations/index.tsx",
      "parent": "/manage"
    }
  }
}
ROUTE_MANIFEST_END */
