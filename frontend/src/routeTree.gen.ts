/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SearchImport } from './routes/search'
import { Route as DisciplinesImport } from './routes/disciplines'
import { Route as CalendarImport } from './routes/calendar'
import { Route as IndexImport } from './routes/index'
import { Route as FederationsIndexImport } from './routes/federations/index'
import { Route as ManageRegionalImport } from './routes/manage/regional'
import { Route as ManageAdminImport } from './routes/manage/admin'
import { Route as FederationsFederationIdImport } from './routes/federations/$federationId'
import { Route as EventsEventIdImport } from './routes/events/$eventId'
import { Route as AuthLoginImport } from './routes/auth/login'

// Create/Update Routes

const SearchRoute = SearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const DisciplinesRoute = DisciplinesImport.update({
  id: '/disciplines',
  path: '/disciplines',
  getParentRoute: () => rootRoute,
} as any)

const CalendarRoute = CalendarImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const FederationsIndexRoute = FederationsIndexImport.update({
  id: '/federations/',
  path: '/federations/',
  getParentRoute: () => rootRoute,
} as any)

const ManageRegionalRoute = ManageRegionalImport.update({
  id: '/manage/regional',
  path: '/manage/regional',
  getParentRoute: () => rootRoute,
} as any)

const ManageAdminRoute = ManageAdminImport.update({
  id: '/manage/admin',
  path: '/manage/admin',
  getParentRoute: () => rootRoute,
} as any)

const FederationsFederationIdRoute = FederationsFederationIdImport.update({
  id: '/federations/$federationId',
  path: '/federations/$federationId',
  getParentRoute: () => rootRoute,
} as any)

const EventsEventIdRoute = EventsEventIdImport.update({
  id: '/events/$eventId',
  path: '/events/$eventId',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/calendar': {
      id: '/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof CalendarImport
      parentRoute: typeof rootRoute
    }
    '/disciplines': {
      id: '/disciplines'
      path: '/disciplines'
      fullPath: '/disciplines'
      preLoaderRoute: typeof DisciplinesImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/events/$eventId': {
      id: '/events/$eventId'
      path: '/events/$eventId'
      fullPath: '/events/$eventId'
      preLoaderRoute: typeof EventsEventIdImport
      parentRoute: typeof rootRoute
    }
    '/federations/$federationId': {
      id: '/federations/$federationId'
      path: '/federations/$federationId'
      fullPath: '/federations/$federationId'
      preLoaderRoute: typeof FederationsFederationIdImport
      parentRoute: typeof rootRoute
    }
    '/manage/admin': {
      id: '/manage/admin'
      path: '/manage/admin'
      fullPath: '/manage/admin'
      preLoaderRoute: typeof ManageAdminImport
      parentRoute: typeof rootRoute
    }
    '/manage/regional': {
      id: '/manage/regional'
      path: '/manage/regional'
      fullPath: '/manage/regional'
      preLoaderRoute: typeof ManageRegionalImport
      parentRoute: typeof rootRoute
    }
    '/federations/': {
      id: '/federations/'
      path: '/federations'
      fullPath: '/federations'
      preLoaderRoute: typeof FederationsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/disciplines': typeof DisciplinesRoute
  '/search': typeof SearchRoute
  '/auth/login': typeof AuthLoginRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/federations/$federationId': typeof FederationsFederationIdRoute
  '/manage/admin': typeof ManageAdminRoute
  '/manage/regional': typeof ManageRegionalRoute
  '/federations': typeof FederationsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/disciplines': typeof DisciplinesRoute
  '/search': typeof SearchRoute
  '/auth/login': typeof AuthLoginRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/federations/$federationId': typeof FederationsFederationIdRoute
  '/manage/admin': typeof ManageAdminRoute
  '/manage/regional': typeof ManageRegionalRoute
  '/federations': typeof FederationsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/calendar': typeof CalendarRoute
  '/disciplines': typeof DisciplinesRoute
  '/search': typeof SearchRoute
  '/auth/login': typeof AuthLoginRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/federations/$federationId': typeof FederationsFederationIdRoute
  '/manage/admin': typeof ManageAdminRoute
  '/manage/regional': typeof ManageRegionalRoute
  '/federations/': typeof FederationsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/calendar'
    | '/disciplines'
    | '/search'
    | '/auth/login'
    | '/events/$eventId'
    | '/federations/$federationId'
    | '/manage/admin'
    | '/manage/regional'
    | '/federations'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/calendar'
    | '/disciplines'
    | '/search'
    | '/auth/login'
    | '/events/$eventId'
    | '/federations/$federationId'
    | '/manage/admin'
    | '/manage/regional'
    | '/federations'
  id:
    | '__root__'
    | '/'
    | '/calendar'
    | '/disciplines'
    | '/search'
    | '/auth/login'
    | '/events/$eventId'
    | '/federations/$federationId'
    | '/manage/admin'
    | '/manage/regional'
    | '/federations/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CalendarRoute: typeof CalendarRoute
  DisciplinesRoute: typeof DisciplinesRoute
  SearchRoute: typeof SearchRoute
  AuthLoginRoute: typeof AuthLoginRoute
  EventsEventIdRoute: typeof EventsEventIdRoute
  FederationsFederationIdRoute: typeof FederationsFederationIdRoute
  ManageAdminRoute: typeof ManageAdminRoute
  ManageRegionalRoute: typeof ManageRegionalRoute
  FederationsIndexRoute: typeof FederationsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CalendarRoute: CalendarRoute,
  DisciplinesRoute: DisciplinesRoute,
  SearchRoute: SearchRoute,
  AuthLoginRoute: AuthLoginRoute,
  EventsEventIdRoute: EventsEventIdRoute,
  FederationsFederationIdRoute: FederationsFederationIdRoute,
  ManageAdminRoute: ManageAdminRoute,
  ManageRegionalRoute: ManageRegionalRoute,
  FederationsIndexRoute: FederationsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/calendar",
        "/disciplines",
        "/search",
        "/auth/login",
        "/events/$eventId",
        "/federations/$federationId",
        "/manage/admin",
        "/manage/regional",
        "/federations/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/calendar": {
      "filePath": "calendar.tsx"
    },
    "/disciplines": {
      "filePath": "disciplines.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/events/$eventId": {
      "filePath": "events/$eventId.tsx"
    },
    "/federations/$federationId": {
      "filePath": "federations/$federationId.tsx"
    },
    "/manage/admin": {
      "filePath": "manage/admin.tsx"
    },
    "/manage/regional": {
      "filePath": "manage/regional.tsx"
    },
    "/federations/": {
      "filePath": "federations/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
