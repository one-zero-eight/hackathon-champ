/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Me
         * @description Get current user info if authenticated
         */
        get: operations["users_get_me"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register By Credentials
         * @description Register using credentials
         */
        post: operations["users_register_by_credentials"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login By Credentials
         * @description Login using credentials
         */
        post: operations["users_login_by_credentials"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout
         * @description Logout (clear session)
         */
        post: operations["users_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create User
         * @description Create user
         */
        post: operations["users_create_user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Users
         * @description Get info about all users.
         */
        get: operations["users_get_all_users"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User
         * @description Get info about one user.
         */
        get: operations["users_get_user"];
        put?: never;
        /**
         * Update User
         * @description Update user info
         */
        post: operations["users_update_user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/random-event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Random Event */
        get: operations["events_get_random_event"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Events
         * @description Get info about all events.
         */
        get: operations["events_get_all_events"];
        put?: never;
        /**
         * Create Many Events
         * @description Create multiple events.
         */
        post: operations["events_create_many_events"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/hint-results": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Hint Results */
        post: operations["events_hint_results"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/suggest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Suggest Event
         * @description Suggest event.
         */
        post: operations["events_suggest_event"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{id}/accredite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Accredite Event
         * @description Accredit event.
         */
        post: operations["events_accredite_event"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search Events
         * @description Search events.
         */
        post: operations["events_search_events"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/search/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Count Events
         * @description Count filtered events.
         */
        post: operations["events_count_events"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/search/count-by-month": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Count Events By Month
         * @description Count filtered events by months.
         */
        post: operations["events_count_events_by_month"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/search/filters/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Filters Locations
         * @description Get all locations.
         */
        get: operations["events_get_all_filters_locations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/search/filters/disciplines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Filters Disciplines
         * @description Get all disciplines.
         */
        get: operations["events_get_all_filters_disciplines"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/search/share": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Share Selection
         * @description Share selection. Use this for .ics too.
         */
        post: operations["events_share_selection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/search/share/{selection_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Selection
         * @description Get selection.
         */
        get: operations["events_get_selection"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/search/share/{selection_id}/.ics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Selection Ics */
        get: operations["events_get_selection_ics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Event
         * @description Get info about one event.
         */
        get: operations["events_get_event"];
        /**
         * Update Event
         * @description Update event.
         */
        put: operations["events_update_event"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/federations/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Federations
         * @description Get info about all events.
         */
        get: operations["federations_get_all_federations"];
        put?: never;
        /**
         * Create Federation
         * @description Create one federation.
         */
        post: operations["federations_create_federation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/federations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Federation
         * @description Get info about one event.
         */
        get: operations["federations_get_federation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/federations/create-many": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Federations
         * @description Create many federations.
         */
        post: operations["federations_create_federations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/federations/{id}/accredite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Accredite Federation
         * @description Accredit federation.
         */
        post: operations["federations_accredite_federation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/federations/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Federation
         * @description Update one federation.
         */
        put: operations["federations_update_federation"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feedback/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Feedback
         * @description Get info about all feedback.
         */
        get: operations["feedback_get_all_feedback"];
        put?: never;
        /**
         * Create Feedback
         * @description Create one feedback.
         */
        post: operations["feedback_create_feedback"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feedback/federations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Feedback For Federation
         * @description Get info about all feedback for federation.
         */
        get: operations["feedback_get_all_feedback_for_federation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file_worker/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload File */
        post: operations["fileworker_upload_file"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file_worker/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download File */
        get: operations["fileworker_download_file"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notify/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Notification
         * @description Create a notification.
         */
        post: operations["notifications_create_notification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notify/admin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Notifications For Admin
         * @description Get all notifications for admins.
         */
        get: operations["notifications_get_notifications_for_admin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notify/admin/unread": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Unread Notifications For Admin
         * @description Get unread notifications for the current admin user.
         */
        get: operations["notifications_get_unread_notifications_for_admin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notify/federation/{federation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Notifications For Federation
         * @description Get all notifications for a specific federation.
         */
        get: operations["notifications_get_notifications_for_federation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notify/federation/{federation_id}/unread": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Unread Notifications For Federation
         * @description Get unread notifications for a specific federation.
         */
        get: operations["notifications_get_unread_notifications_for_federation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notify/{notify_id}/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Mark Notification As Read
         * @description Mark a notification as read by the current user.
         */
        put: operations["notifications_mark_notification_as_read"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notify/{notify_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Notification
         * @description Get details of a specific notification by ID.
         */
        get: operations["notifications_get_notification"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/email/connect-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start Email Flow */
        post: operations["email_start_email_flow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/email/validate-code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** End Email Flow */
        post: operations["email_end_email_flow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/email/start-reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start Reset Password Flow */
        post: operations["email_start_reset_password_flow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/email/set-new-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set New Password */
        post: operations["email_set_new_password"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AccreditationRequestEvent
         * @description Пользователь отправил заявку на аккредитацию на событие
         */
        AccreditationRequestEvent: {
            /**
             * @description Тип уведомления (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            notify_type: "new_event";
            /**
             * Event Id
             * @description ID события
             * @example 5eb7cf5a86d9755df3a6c593
             */
            event_id: string;
            /**
             * Federation Id
             * @description ID федерации
             * @example 5eb7cf5a86d9755df3a6c593
             */
            federation_id: string;
        };
        /**
         * AccreditationRequestFederation
         * @description Пользователь зарегистрировал новую федерацию и отправил заявку на аккредитацию
         */
        AccreditationRequestFederation: {
            /**
             * @description Тип уведомления (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            notify_type: "new_federation";
            /**
             * Federation Id
             * @description ID федерации
             * @example 5eb7cf5a86d9755df3a6c593
             */
            federation_id: string;
        };
        /**
         * AccreditedEvent
         * @description Событие аккредитовано или отклонено
         */
        AccreditedEvent: {
            /**
             * @description Тип уведомления (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            notify_type: "accredited_event";
            /**
             * Event Id
             * @description ID события
             * @example 5eb7cf5a86d9755df3a6c593
             */
            event_id: string;
            /** @description Статус события */
            status: components["schemas"]["EventStatusEnum"];
            /**
             * Status Comment
             * @description Комментарий к статусу
             */
            status_comment: string | null;
        };
        /**
         * AccreditedFederation
         * @description Федерация аккредитована или отклонена
         */
        AccreditedFederation: {
            /**
             * @description Тип уведомления (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            notify_type: "accredited_federation";
            /**
             * Federation Id
             * @description ID федерации
             * @example 5eb7cf5a86d9755df3a6c593
             */
            federation_id: string;
            /** @description Статус федерации */
            status: components["schemas"]["StatusEnum"];
            /**
             * Status Comment
             * @description Комментарий к статусу
             */
            status_comment: string | null;
        };
        /** Body_email_start_email_flow */
        Body_email_start_email_flow: {
            /**
             * Email
             * Format: email
             */
            email: string;
        };
        /** Body_events_hint_results */
        Body_events_hint_results: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** Body_events_search_events */
        Body_events_search_events: {
            filters: components["schemas"]["Filters"];
            sort: components["schemas"]["Sort"];
            pagination: components["schemas"]["Pagination"];
        };
        /** Body_events_share_selection */
        Body_events_share_selection: {
            filters: components["schemas"]["Filters"];
            sort: components["schemas"]["Sort"];
        };
        /** Body_fileworker_upload_file */
        Body_fileworker_upload_file: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** CreateUser */
        CreateUser: {
            /** Login */
            login: string;
            /** Password */
            password: string;
            /** Federation */
            federation?: string | null;
        };
        /** DateFilter */
        DateFilter: {
            /** Start Date */
            start_date?: string | null;
            /** End Date */
            end_date?: string | null;
        };
        /** DisciplinesFilterVariants */
        DisciplinesFilterVariants: {
            /** Sport */
            sport: string;
            /** Disciplines */
            disciplines: string[];
        };
        /** EmailFlowReference */
        EmailFlowReference: {
            /**
             * Email Flow Id
             * @example 5eb7cf5a86d9755df3a6c593
             */
            email_flow_id: string;
        };
        /** EmailFlowResult */
        EmailFlowResult: {
            status: components["schemas"]["EmailFlowVerificationStatus"];
            /** Email */
            email?: string | null;
        };
        /**
         * EmailFlowVerificationStatus
         * @enum {string}
         */
        EmailFlowVerificationStatus: "success" | "expired" | "incorrect" | "not_found";
        /** Event */
        Event: {
            /**
             * Id
             * Format: objectid
             * @description MongoDB document ObjectID
             * @default None
             * @example 5eb7cf5a86d9755df3a6c593
             */
            id: string;
            /**
             * Host Federation
             * @description Федерация, организующая мероприятие (None - для парсинга со стороны разработчиков)
             */
            host_federation: string | null;
            /**
             * @description Статус мероприятия
             * @default on_consideration
             */
            status: components["schemas"]["EventStatusEnum"];
            /**
             * Status Comment
             * @description Комментарий к статусу
             */
            status_comment: string | null;
            /**
             * Accreditation Comment
             * @description Комментарий к аккредитации. Заполняет представитель для того, чтобы сообщить доп. информацию администратору
             */
            accreditation_comment: string | null;
            /**
             * Title
             * @description Наименование спортивного мероприятия
             */
            title: string;
            /**
             * Description
             * @description Описание
             */
            description: string | null;
            /** @description Пол участников (None - любой) */
            gender: components["schemas"]["Gender"] | null;
            /**
             * Age Min
             * @description Минимальный возраст участников
             */
            age_min: number | null;
            /**
             * Age Max
             * @description Максимальный возраст участников
             */
            age_max: number | null;
            /**
             * Discipline
             * @description Названия дисциплин
             */
            discipline: string[];
            /**
             * Start Date
             * Format: date-time
             * @description Дата начала
             */
            start_date: string;
            /**
             * End Date
             * Format: date-time
             * @description Дата конца
             */
            end_date: string;
            /**
             * Location
             * @description Места проведения
             */
            location: components["schemas"]["EventLocation"][];
            /**
             * Participant Count
             * @description Количество участников
             */
            participant_count: number | null;
            /**
             * Ekp Id
             * @description № СМ в ЕКП
             */
            ekp_id: number | null;
            /**
             * Page
             * @description Страница в ЕКП
             */
            page: number | null;
            /** @description Результаты мероприятия */
            results: components["schemas"]["Results"] | null;
        };
        /** EventLocation */
        EventLocation: {
            /**
             * Country
             * @description Название страны
             */
            country: string;
            /**
             * Region
             * @description Название региона
             */
            region?: string | null;
            /**
             * City
             * @description Название города
             */
            city?: string | null;
        };
        /** EventSchema */
        EventSchema: {
            /**
             * Host Federation
             * @description Федерация, организующая мероприятие (None - для парсинга со стороны разработчиков)
             */
            host_federation?: string | null;
            /**
             * @description Статус мероприятия
             * @default on_consideration
             */
            status: components["schemas"]["EventStatusEnum"];
            /**
             * Status Comment
             * @description Комментарий к статусу
             */
            status_comment?: string | null;
            /**
             * Accreditation Comment
             * @description Комментарий к аккредитации. Заполняет представитель для того, чтобы сообщить доп. информацию администратору
             */
            accreditation_comment?: string | null;
            /**
             * Title
             * @description Наименование спортивного мероприятия
             */
            title: string;
            /**
             * Description
             * @description Описание
             */
            description?: string | null;
            /** @description Пол участников (None - любой) */
            gender?: components["schemas"]["Gender"] | null;
            /**
             * Age Min
             * @description Минимальный возраст участников
             */
            age_min?: number | null;
            /**
             * Age Max
             * @description Максимальный возраст участников
             */
            age_max?: number | null;
            /**
             * Discipline
             * @description Названия дисциплин
             */
            discipline: string[];
            /**
             * Start Date
             * Format: date-time
             * @description Дата начала
             */
            start_date: string;
            /**
             * End Date
             * Format: date-time
             * @description Дата конца
             */
            end_date: string;
            /**
             * Location
             * @description Места проведения
             */
            location: components["schemas"]["EventLocation"][];
            /**
             * Participant Count
             * @description Количество участников
             */
            participant_count?: number | null;
            /**
             * Ekp Id
             * @description № СМ в ЕКП
             */
            ekp_id?: number | null;
            /**
             * Page
             * @description Страница в ЕКП
             */
            page?: number | null;
            /** @description Результаты мероприятия */
            results?: components["schemas"]["Results"] | null;
        };
        /**
         * EventStatusEnum
         * @enum {string}
         */
        EventStatusEnum: "draft" | "on_consideration" | "accredited" | "rejected";
        /** Federation */
        Federation: {
            /**
             * Id
             * Format: objectid
             * @description MongoDB document ObjectID
             * @default None
             * @example 5eb7cf5a86d9755df3a6c593
             */
            id: string;
            /**
             * Region
             * @description Название региона (области)
             */
            region: string;
            /**
             * District
             * @description Название федерального округа
             */
            district: string | null;
            /**
             * @description Статус федерации (на рассмотрении, аккредитована, отклонена)
             * @default on_consideration
             */
            status: components["schemas"]["StatusEnum"];
            /**
             * Status Comment
             * @description Комментарий к статусу
             */
            status_comment: string | null;
            /**
             * Accreditation Comment
             * @description Комментарий к аккредитации. Заполняет представитель для того, чтобы сообщить о положении для аккредитации
             */
            accreditation_comment: string | null;
            /**
             * Description
             * @description Описание
             */
            description: string | null;
            /**
             * Head
             * @description ФИО руководителя
             */
            head: string | null;
            /**
             * Email
             * @description Электронная почта
             */
            email: string | null;
            /**
             * Phone
             * @description Телефон
             */
            phone: string | null;
            /**
             * Site
             * @description Сайт
             */
            site: string | null;
            /**
             * Address
             * @description Адрес офиса
             */
            address: string | null;
            /**
             * Logo
             * @description Ссылка на логотип (полный URL)
             */
            logo: string | null;
            /**
             * Telegram
             * @description Ссылка на канал в Telegram
             */
            telegram: string | null;
        };
        /** FederationSchema */
        FederationSchema: {
            /**
             * Region
             * @description Название региона (области)
             */
            region: string;
            /**
             * District
             * @description Название федерального округа
             */
            district?: string | null;
            /**
             * @description Статус федерации (на рассмотрении, аккредитована, отклонена)
             * @default on_consideration
             */
            status: components["schemas"]["StatusEnum"];
            /**
             * Status Comment
             * @description Комментарий к статусу
             */
            status_comment?: string | null;
            /**
             * Accreditation Comment
             * @description Комментарий к аккредитации. Заполняет представитель для того, чтобы сообщить о положении для аккредитации
             */
            accreditation_comment?: string | null;
            /**
             * Description
             * @description Описание
             */
            description?: string | null;
            /**
             * Head
             * @description ФИО руководителя
             */
            head?: string | null;
            /**
             * Email
             * @description Электронная почта
             */
            email?: string | null;
            /**
             * Phone
             * @description Телефон
             */
            phone?: string | null;
            /**
             * Site
             * @description Сайт
             */
            site?: string | null;
            /**
             * Address
             * @description Адрес офиса
             */
            address?: string | null;
            /**
             * Logo
             * @description Ссылка на логотип (полный URL)
             */
            logo?: string | null;
            /**
             * Telegram
             * @description Ссылка на канал в Telegram
             */
            telegram?: string | null;
        };
        /** Feedback */
        Feedback: {
            /**
             * Id
             * Format: objectid
             * @description MongoDB document ObjectID
             * @default None
             * @example 5eb7cf5a86d9755df3a6c593
             */
            id: string;
            /**
             * Subject
             * @description Тема сообщения
             */
            subject: string;
            /**
             * Text
             * @description Текст сообщения
             */
            text: string;
            /**
             * Email
             * @description Email пользователя, если он хочет получить ответ на свой вопрос
             */
            email: string | null;
            /**
             * Federation
             * @description ID федерации, если сообщение направлено к федерации
             */
            federation: string | null;
        };
        /** FeedbackSchema */
        FeedbackSchema: {
            /**
             * Subject
             * @description Тема сообщения
             */
            subject: string;
            /**
             * Text
             * @description Текст сообщения
             */
            text: string;
            /**
             * Email
             * @description Email пользователя, если он хочет получить ответ на свой вопрос
             */
            email?: string | null;
            /**
             * Federation
             * @description ID федерации, если сообщение направлено к федерации
             */
            federation?: string | null;
        };
        /**
         * Filters
         * @description Список фильтров, которые применяются через И
         */
        Filters: {
            /** Query */
            query?: string | null;
            date?: components["schemas"]["DateFilter"] | null;
            /** Discipline */
            discipline?: string[] | null;
            /** Location */
            location?: components["schemas"]["LocationFilter"][] | null;
            gender?: components["schemas"]["Gender"] | null;
            age?: components["schemas"]["MinMaxFilter"] | null;
            participant_count?: components["schemas"]["MinMaxFilter"] | null;
            /** By Ids */
            by_ids?: string[] | null;
        };
        /**
         * Gender
         * @enum {string}
         */
        Gender: "male" | "female";
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** LocationFilter */
        LocationFilter: {
            /** Country */
            country: string;
            /** Region */
            region?: string | null;
            /** City */
            city?: string | null;
        };
        /** LocationsFilterVariants */
        LocationsFilterVariants: {
            /** Country */
            country: string;
            /** Regions */
            regions: components["schemas"]["RegionsFilterVariants"][];
        };
        /** MinMaxFilter */
        MinMaxFilter: {
            /** Min */
            min?: number | null;
            /** Max */
            max?: number | null;
        };
        /**
         * NewFeedback
         * @description Пользователь отправил обратную связь
         */
        NewFeedback: {
            /**
             * @description Тип уведомления (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            notify_type: "new_feedback";
            /**
             * Feedback Id
             * @description ID обратной связи
             * @example 5eb7cf5a86d9755df3a6c593
             */
            feedback_id: string;
        };
        /** Notify */
        Notify: {
            /**
             * Id
             * Format: objectid
             * @description MongoDB document ObjectID
             * @default None
             * @example 5eb7cf5a86d9755df3a6c593
             */
            id: string;
            /**
             * Created At
             * Format: date-time
             * @description Дата создания уведомления
             */
            created_at: string;
            /**
             * Read By
             * @description Список пользователей, которые прочитали уведомление
             * @default []
             */
            read_by: string[];
            /**
             * For Admin
             * @description Для администраторов
             * @default false
             */
            for_admin: boolean;
            /**
             * For Federation
             * @description Для какой федерации предназначено уведомление
             */
            for_federation: string | null;
            /**
             * Inner
             * @description Тип уведомления и его содержимое
             */
            inner: components["schemas"]["AccreditationRequestFederation"] | components["schemas"]["AccreditationRequestEvent"] | components["schemas"]["AccreditedFederation"] | components["schemas"]["AccreditedEvent"] | components["schemas"]["NewFeedback"];
        };
        /** NotifySchema */
        NotifySchema: {
            /**
             * Created At
             * Format: date-time
             * @description Дата создания уведомления
             */
            created_at?: string;
            /**
             * Read By
             * @description Список пользователей, которые прочитали уведомление
             * @default []
             */
            read_by: string[];
            /**
             * For Admin
             * @description Для администраторов
             * @default false
             */
            for_admin: boolean;
            /**
             * For Federation
             * @description Для какой федерации предназначено уведомление
             */
            for_federation?: string | null;
            /**
             * Inner
             * @description Тип уведомления и его содержимое
             */
            inner: components["schemas"]["AccreditationRequestFederation"] | components["schemas"]["AccreditationRequestEvent"] | components["schemas"]["AccreditedFederation"] | components["schemas"]["AccreditedEvent"] | components["schemas"]["NewFeedback"];
        };
        /**
         * Order
         * @enum {string}
         */
        Order: "asc" | "desc";
        /** Pagination */
        Pagination: {
            /** Page Size */
            page_size: number;
            /** Page No */
            page_no: number;
        };
        /** Protocol */
        Protocol: {
            /**
             * By Url
             * @description Ссылка на протокол
             */
            by_url?: string | null;
            /**
             * By File
             * @description Путь к файлу в S3
             */
            by_file?: string | null;
        };
        /** RegionsFilterVariants */
        RegionsFilterVariants: {
            /** Region */
            region: string | null;
            /** Cities */
            cities: string[];
        };
        /** Results */
        Results: {
            /**
             * Protocols
             * @description Протоколы зачёта, список ссылок
             */
            protocols?: components["schemas"]["Protocol"][] | null;
            /**
             * Team Places
             * @description Места команд
             */
            team_places?: components["schemas"]["TeamPlace"][] | null;
            /**
             * Solo Places
             * @description Места участников
             */
            solo_places?: components["schemas"]["SoloPlace"][] | null;
        };
        /** SearchEventsResponse */
        SearchEventsResponse: {
            filters: components["schemas"]["Filters"];
            sort: components["schemas"]["Sort"];
            pagination: components["schemas"]["Pagination"];
            /** Page */
            page: number;
            /** Pages Total */
            pages_total: number;
            /** Events */
            events: components["schemas"]["Event"][];
        };
        /** Selection */
        Selection: {
            /**
             * Id
             * Format: objectid
             * @description MongoDB document ObjectID
             * @default None
             * @example 5eb7cf5a86d9755df3a6c593
             */
            id: string;
            /** @description Filter for the selection. */
            filters: components["schemas"]["Filters"];
            /**
             * @description Sort for the selection.
             * @default {}
             */
            sort: components["schemas"]["Sort"];
        };
        /** SoloPlace */
        SoloPlace: {
            /**
             * Place
             * @description Место (1, 2, 3)
             */
            place: number;
            /**
             * Participant
             * @description ФИО участника
             */
            participant: string;
            /**
             * Score
             * @description Очки
             */
            score?: number | null;
        };
        /** Sort */
        Sort: {
            date?: components["schemas"]["Order"] | null;
            age?: components["schemas"]["Order"] | null;
            participant_count?: components["schemas"]["Order"] | null;
        };
        /**
         * StatusEnum
         * @enum {string}
         */
        StatusEnum: "on_consideration" | "accredited" | "rejected";
        /** TeamPlace */
        TeamPlace: {
            /**
             * Place
             * @description Место (1, 2, 3)
             */
            place: number;
            /**
             * Team
             * @description Название команды
             */
            team: string;
            /**
             * Members
             * @description Состав команды
             */
            members: string[];
            /**
             * Score
             * @description Очки
             */
            score?: number | null;
        };
        /** UpdateUser */
        UpdateUser: {
            /** Login */
            login?: string | null;
            /** Password */
            password?: string | null;
            /** Federation */
            federation?: string | null;
        };
        /**
         * UserRole
         * @enum {string}
         */
        UserRole: "default" | "admin";
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** ViewUser */
        ViewUser: {
            /**
             * Id
             * @example 5eb7cf5a86d9755df3a6c593
             */
            id: string;
            /** Login */
            login: string;
            role: components["schemas"]["UserRole"];
            /** Federation */
            federation?: string | null;
            /** Email */
            email?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type SchemaAccreditationRequestEvent = components['schemas']['AccreditationRequestEvent'];
export type SchemaAccreditationRequestFederation = components['schemas']['AccreditationRequestFederation'];
export type SchemaAccreditedEvent = components['schemas']['AccreditedEvent'];
export type SchemaAccreditedFederation = components['schemas']['AccreditedFederation'];
export type SchemaBodyEmailStartEmailFlow = components['schemas']['Body_email_start_email_flow'];
export type SchemaBodyEventsHintResults = components['schemas']['Body_events_hint_results'];
export type SchemaBodyEventsSearchEvents = components['schemas']['Body_events_search_events'];
export type SchemaBodyEventsShareSelection = components['schemas']['Body_events_share_selection'];
export type SchemaBodyFileworkerUploadFile = components['schemas']['Body_fileworker_upload_file'];
export type SchemaCreateUser = components['schemas']['CreateUser'];
export type SchemaDateFilter = components['schemas']['DateFilter'];
export type SchemaDisciplinesFilterVariants = components['schemas']['DisciplinesFilterVariants'];
export type SchemaEmailFlowReference = components['schemas']['EmailFlowReference'];
export type SchemaEmailFlowResult = components['schemas']['EmailFlowResult'];
export type SchemaEmailFlowVerificationStatus = components['schemas']['EmailFlowVerificationStatus'];
export type SchemaEvent = components['schemas']['Event'];
export type SchemaEventLocation = components['schemas']['EventLocation'];
export type SchemaEventSchema = components['schemas']['EventSchema'];
export type SchemaEventStatusEnum = components['schemas']['EventStatusEnum'];
export type SchemaFederation = components['schemas']['Federation'];
export type SchemaFederationSchema = components['schemas']['FederationSchema'];
export type SchemaFeedback = components['schemas']['Feedback'];
export type SchemaFeedbackSchema = components['schemas']['FeedbackSchema'];
export type SchemaFilters = components['schemas']['Filters'];
export type SchemaGender = components['schemas']['Gender'];
export type SchemaHttpValidationError = components['schemas']['HTTPValidationError'];
export type SchemaLocationFilter = components['schemas']['LocationFilter'];
export type SchemaLocationsFilterVariants = components['schemas']['LocationsFilterVariants'];
export type SchemaMinMaxFilter = components['schemas']['MinMaxFilter'];
export type SchemaNewFeedback = components['schemas']['NewFeedback'];
export type SchemaNotify = components['schemas']['Notify'];
export type SchemaNotifySchema = components['schemas']['NotifySchema'];
export type SchemaOrder = components['schemas']['Order'];
export type SchemaPagination = components['schemas']['Pagination'];
export type SchemaProtocol = components['schemas']['Protocol'];
export type SchemaRegionsFilterVariants = components['schemas']['RegionsFilterVariants'];
export type SchemaResults = components['schemas']['Results'];
export type SchemaSearchEventsResponse = components['schemas']['SearchEventsResponse'];
export type SchemaSelection = components['schemas']['Selection'];
export type SchemaSoloPlace = components['schemas']['SoloPlace'];
export type SchemaSort = components['schemas']['Sort'];
export type SchemaStatusEnum = components['schemas']['StatusEnum'];
export type SchemaTeamPlace = components['schemas']['TeamPlace'];
export type SchemaUpdateUser = components['schemas']['UpdateUser'];
export type SchemaUserRole = components['schemas']['UserRole'];
export type SchemaValidationError = components['schemas']['ValidationError'];
export type SchemaViewUser = components['schemas']['ViewUser'];
export type $defs = Record<string, never>;
export interface operations {
    users_get_me: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Current user info */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ViewUser"];
                };
            };
            /** @description Unable to verify credentials OR Credentials not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_register_by_credentials: {
        parameters: {
            query: {
                login: string;
                password: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully registered */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    users_login_by_credentials: {
        parameters: {
            query: {
                login: string;
                password: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully logged in (session updated) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    users_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully logged out (session cleared) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    users_create_user: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUser"];
            };
        };
        responses: {
            /** @description Successfully created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ViewUser"];
                };
            };
            /** @description Only admin can create users */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    users_get_all_users: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Info about all users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ViewUser"][];
                };
            };
            /** @description Only admin can get users */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_get_user: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Info about user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ViewUser"];
                };
            };
            /** @description Only admin can get users */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    users_update_user: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUser"];
            };
        };
        responses: {
            /** @description User info updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ViewUser"];
                };
            };
            /** @description Only admin can update users */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    events_get_random_event: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
        };
    };
    events_get_all_events: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Info about all events */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"][];
                };
            };
        };
    };
    events_create_many_events: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventSchema"][];
            };
        };
        responses: {
            /** @description Create many events */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Only admin can create events */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    events_hint_results: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_events_hint_results"];
            };
        };
        responses: {
            /** @description Hint for event results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Results"];
                };
            };
            /** @description Cannot parse file */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    events_suggest_event: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventSchema"];
            };
        };
        responses: {
            /** @description Suggest event */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    events_accredite_event: {
        parameters: {
            query: {
                status: components["schemas"]["EventStatusEnum"];
                status_comment?: string | null;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Event info updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    events_search_events: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_events_search_events"];
            };
        };
        responses: {
            /** @description Search events */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchEventsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    events_count_events: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Filters"];
            };
        };
        responses: {
            /** @description Count events */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    events_count_events_by_month: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Filters"];
            };
        };
        responses: {
            /** @description Count events by months */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: number;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    events_get_all_filters_locations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All locations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LocationsFilterVariants"][];
                };
            };
        };
    };
    events_get_all_filters_disciplines: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All disciplines */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DisciplinesFilterVariants"];
                };
            };
        };
    };
    events_share_selection: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_events_share_selection"];
            };
        };
        responses: {
            /** @description Share selection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Selection"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    events_get_selection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                selection_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get selection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Selection"];
                };
            };
            /** @description Selection not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    events_get_selection_ics: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                selection_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get selection in .ics format */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Selection not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    events_get_event: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Info about event */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            /** @description Event not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    events_update_event: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventSchema"];
            };
        };
        responses: {
            /** @description Event info updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            /** @description Only admin or related federation can update event */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Event not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    federations_get_all_federations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Info about all federations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Federation"][];
                };
            };
        };
    };
    federations_create_federation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FederationSchema"];
            };
        };
        responses: {
            /** @description Create federation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Federation"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    federations_get_federation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Info about federation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Federation"];
                };
            };
            /** @description Federation not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    federations_create_federations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FederationSchema"][];
            };
        };
        responses: {
            /** @description Create federations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Federation"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    federations_accredite_federation: {
        parameters: {
            query: {
                status: components["schemas"]["StatusEnum"];
                status_comment?: string | null;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Federation info updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Federation"];
                };
            };
            /** @description Only admin can accredit federation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Federation not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    federations_update_federation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FederationSchema"];
            };
        };
        responses: {
            /** @description Update federation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Federation"];
                };
            };
            /** @description Only admin or federation owner can update federation */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    feedback_get_all_feedback: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Info about all feedback */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Feedback"][];
                };
            };
            /** @description Only admin can get feedback */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    feedback_create_feedback: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FeedbackSchema"];
            };
        };
        responses: {
            /** @description Feedback created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Feedback"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    feedback_get_all_feedback_for_federation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Info about all feedback for federation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Feedback"][];
                };
            };
            /** @description Only admin and related federation can get feedback */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    fileworker_upload_file: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_fileworker_upload_file"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    fileworker_download_file: {
        parameters: {
            query: {
                url: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    notifications_create_notification: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotifySchema"];
            };
        };
        responses: {
            /** @description Create notification */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notify"];
                };
            };
            /** @description Only admins can access this resource */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    notifications_get_notifications_for_admin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get all notifications for admins */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notify"][];
                };
            };
        };
    };
    notifications_get_unread_notifications_for_admin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get unread notifications for admin */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notify"][];
                };
            };
        };
    };
    notifications_get_notifications_for_federation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                federation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get notifications for a federation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notify"][];
                };
            };
            /** @description Only admins or federation owners can access this resource */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    notifications_get_unread_notifications_for_federation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                federation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get unread notifications for federation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notify"][];
                };
            };
            /** @description Only admins or federation owners can access this resource */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    notifications_mark_notification_as_read: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                notify_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Mark notification as read */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    notifications_get_notification: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                notify_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get notification details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Notify"];
                };
            };
            /** @description Only admins can access this resource */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Notification not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    email_start_email_flow: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Body_email_start_email_flow"];
            };
        };
        responses: {
            /** @description Start email flow */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailFlowReference"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    email_end_email_flow: {
        parameters: {
            query: {
                email_flow_id: string;
                verification_code: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description End email flow */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailFlowResult"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    email_start_reset_password_flow: {
        parameters: {
            query: {
                email_or_login: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Start reset password flow */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailFlowReference"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    email_set_new_password: {
        parameters: {
            query: {
                email_flow_id: string;
                verification_code: string;
                new_password: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Set new password */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailFlowResult"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
